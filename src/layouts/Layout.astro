---
import Sidebar from '../components/Sidebar.astro';
import Navbar from '../components/Navbar.astro';
const { lang } = Astro.params;

interface Ad {
  text?: string,
  texto?: string,
  text_mobile?: string,
  texto_mobile?: string,
  background_color?: string,
  text_color?: string,
  active? :boolean,
}

import { Client } from '@notionhq/client';
const notionToken = import.meta.env.NOTION_KEY;
const notionDatabaseId = import.meta.env.NOTION_PAGE_ID_ADS;
const notion = new Client({ auth: notionToken });
const response = await notion.databases.query({ database_id: notionDatabaseId });
const reviewsNotion = response.results;
const ads = reviewsNotion.map((ad) => {

  const adUpdated: Ad = {};

  if('properties' in ad && 'rich_text' in ad.properties.Text && Array.isArray(ad.properties.Text.rich_text))
    adUpdated.text = ad.properties.Text.rich_text[0].plain_text;

  if('properties' in ad && 'rich_text' in ad.properties.Texto && Array.isArray(ad.properties.Texto.rich_text))
    adUpdated.texto = ad.properties.Texto.rich_text[0].plain_text;

  if('properties' in ad && 'rich_text' in ad.properties["Text Mobile"] && Array.isArray(ad.properties["Text Mobile"].rich_text))
    adUpdated.text_mobile = ad.properties["Text Mobile"].rich_text[0].plain_text;

  if('properties' in ad && 'rich_text' in ad.properties["Texto Mobile"] && Array.isArray(ad.properties["Texto Mobile"].rich_text))
    adUpdated.texto_mobile = ad.properties["Texto Mobile"].rich_text[0].plain_text;

  if('properties' in ad && 'rich_text' in ad.properties["Background Color"] && Array.isArray(ad.properties["Background Color"].rich_text))
    adUpdated.background_color = ad.properties["Background Color"].rich_text[0].plain_text;

  if('properties' in ad && 'rich_text' in ad.properties["Text Color"] && Array.isArray(ad.properties["Text Color"].rich_text))
    adUpdated.text_color = ad.properties["Text Color"].rich_text[0].plain_text;

  if('properties' in ad && 'checkbox' in ad.properties.Active && ad.properties.Active.checkbox)
    adUpdated.active = ad.properties.Active.checkbox?true:false;

  return adUpdated;

})
const anyAds = ads.filter((ad) => {
  return ad.active
})
---

<!doctype html>
<html lang={lang}>
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>Achieve Rent a Car</title>
	</head>
	<body class="min-h-screen">

	   <Sidebar />
	   <Navbar ads={ads} />

		<main class={"min-h-screen "+(anyAds.length?"pt-36":"pt-24")}>
		    <slot />
		</main>

    	<style is:global>

            a { @apply underline }
    	    .margin { @apply px-6 md:px-20 }
            #achieve {
                text-shadow:
                    1px 1px 0 #DA291C,
                    -1px 1px 0 #DA291C,
                    -1px -1px 0 #DA291C,
                    1px -1px 0 #DA291C;
            }

    	</style>

	</body>
</html>
